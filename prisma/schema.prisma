generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  password          String
  role              UserRole
  last_logged_in    DateTime?
  verified          Boolean   @default(false)
  verification_code String?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @updatedAt

  passwordResetToken String?
  passwordResetAt    DateTime?

  vendor     Vendor?
  contractor Contractor?
  warehouse  Warehouse?
  backend    Backend?
}

model Vendor {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [user_id], references: [id])
  user_id      Int           @unique
  company_name String
  phone        String
  email        String
  address      String
  pin          String
  state        State         @relation(fields: [stateId], references: [id])
  stateId      Int
  district     District      @relation(fields: [districtId], references: [id])
  districtId   Int
  city         String
  pan          String
  gst          String
  licence      String
  pan_no       String
  gst_no       String
  licence_no   String
  vendor_id    String?
  requested_on DateTime      @default(now())
  products     Product[]
  status       AccountStatus
  Enquiry      Enquiry[]
}

model Contractor {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [user_id], references: [id])
  user_id       Int           @unique
  contractor_id String?
  name          String
  company_name  String
  phone         String
  email         String
  licence       String
  license_no    String?
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  status        AccountStatus
  Enquiry       Enquiry[]
}

model Warehouse {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [user_id], references: [id])
  user_id       Int      @unique
  name          String
  location      String
  incharge_name String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Backend {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [user_id], references: [id])
  user_id     Int      @unique
  name        String
  email       String
  phone       String
  employee_id String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String
  category_id   Int
  grade_id      Int
  quantity      Int
  product_image String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  vendor_id     Int
  category      Category      @relation(fields: [category_id], references: [id])
  grade         Grade         @relation(fields: [grade_id], references: [id])
  vendor        Vendor        @relation(fields: [vendor_id], references: [id])
  unit_id       Int
  unit          Unit          @relation(fields: [unit_id], references: [id])
  dailyRates    DailyRate[]
  Enquiry       Enquiry[]
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Product Product[]
}

model Grade {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Product Product[]
}

model State {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  districts District[]
  vendors   Vendor[]
}

model District {
  id      Int      @id @default(autoincrement())
  name    String
  state   State    @relation(fields: [stateId], references: [id])
  stateId Int
  Vendor  Vendor[]
}

model Unit {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model DailyRate {
  id         Int      @id @default(autoincrement())
  daily_rate Float
  product_id Int
  product    Product  @relation(fields: [product_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Enquiry {
  id            Int           @id @default(autoincrement())
  enquiry_id    String        @unique
  product_id    Int
  vendor_id     Int
  contractor_id Int
  quantity      Int
  is_read       Boolean       @default(false)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  product       Product       @relation(fields: [product_id], references: [id])
  vendor        Vendor        @relation(fields: [vendor_id], references: [id])
  contractor    Contractor    @relation(fields: [contractor_id], references: [id])
  negotiations  Negotiation[]
}

model Negotiation {
  id                    Int               @id @default(autoincrement())
  enquiry_id            Int               
  price_from_contractor Float
  price_from_vendor     Float?
  status_from_contractor                  NegotiationStatus @default(REPLIED)
  status_from_vendor                      NegotiationStatus @default(PENDING)
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt
  enquiry               Enquiry           @relation(fields: [enquiry_id], references: [id])
}

enum UserRole {
  VENDOR
  CONTRACTOR
  WAREHOUSE
  BACKEND
}

enum AccountStatus {
  Approved
  Pending
  Rejected
}

enum NegotiationStatus {
  ACCEPTED
  REJECTED
  REPLIED
  PENDING
}
