// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Adjust according to your database
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  password          String
  role              UserRole
  last_logged_in    DateTime?
  verified          Boolean   @default(false)
  verification_code String?
  created_at        DateTime?  @default(now())
  updated_at        DateTime?  @updatedAt

  vendor     Vendor?
  contractor Contractor?
  warehouse  Warehouse?
  backend    Backend?
}

model Vendor {
  id           Int    @id @default(autoincrement())
  user         User   @relation(fields: [user_id], references: [id])
  user_id      Int    @unique
  company_name String
  phone        String
  email        String
  address      String
  pin          String
  state        State  @relation(fields: [stateId], references: [id])
  stateId      Int
  district     District  @relation(fields: [districtId], references: [id])
  districtId   Int
  city         String
  pan          String
  gst          String
  licence      String
  pan_no       String
  gst_no       String
  licence_no   String
  vendor_id    String?
  requested_on DateTime @default(now())
  products     Product[]
  status       AccountStatus
}

model Contractor {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [user_id], references: [id])
  user_id      Int      @unique
  name         String
  company_name String
  phone        String
  email        String
  licence      String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model Warehouse {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [user_id], references: [id])
  user_id       Int      @unique
  name          String
  location      String
  incharge_name String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Backend {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int      @unique
  name       String
  email      String
  phone      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Product {
  id            Int       @id @default(autoincrement())
  name          String
  category_id   Int
  grade_id      Int
  quantity      Int
  product_image String
  base_price    Float
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  vendor_id     Int
  category      Category  @relation(fields: [category_id], references: [id])
  grade         Grade     @relation(fields: [grade_id], references: [id])
  vendor        Vendor    @relation(fields: [vendor_id], references: [id])
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  Product Product[]
}

model Grade {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  Product Product[]
}

model State {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  districts District[]
  vendors    Vendor[]
}

model District {
  id        Int      @id @default(autoincrement())
  name      String
  state     State  @relation(fields: [stateId], references: [id])
  stateId   Int
  Vendor    Vendor[]
}


enum UserRole {
  VENDOR
  CONTRACTOR
  WAREHOUSE
  BACKEND
}

enum AccountStatus {
  Approved
  Pending
  Rejected
}